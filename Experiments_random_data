# approaches = ['dft','prn']
# keeping data dimension different for ['intrinsic data same','intrinsic data different']: dim = N x [3,6,10,15,25,50]
# Trees: n_trees = [5,10,25,50,75]
# observations: 2000

# Setup
# | experiment_num | dimension_varying | dim | n_trees | approach | nodes visited | nn | d |
# total experiments: 2(approaches) * 2(varying dim) * 6(dim) * 5(n_trees) * 5(reps) = 600


import pandas as pd
# Generate random sample from the gaussian mixture
def gen_data_gaussmix(dim,n = 2000):
  g1 = np.random.normal(loc=5, scale=1 , size=(n, dim))
  g2 = np.random.normal(loc=9, scale=1.3 , size=(n, dim))
  g3 = np.random.normal(loc=0, scale=1.5 , size=(n, dim))
  points = g1+g2+g3/3
  return points

# Generate random sample from single gaussian
def gen_data_gauss(dim,n = 2000):
  points = np.random.normal(loc=0, scale=1 , size=(n, dim))
  return points

# setting up

# Result dataframe
column_list = ['experiment_num','dimension_varying','dim','n_trees','approach','nodes_visited', 'nn', 'd']
results_df = pd.DataFrame(columns=column_list)

# exp no
i = 1
#intrinsic dimension
INT_DIM = 3
# repeat exp for multiple points
reps = 5
# result saving directory
RESULT_DIR = '/content/drive/MyDrive/results_FGMDA_v4.xls'

for rep in range(reps):
  for dim in [3,6,10,15,25,50]:
    for dimvar in ['DATADIFFDIM','DATAINSTSAME']:
      if dimvar == 'DATADIFFDIM':  
        query = gen_data_gaussmix(dim,n = 1)[0]
        # generate data
        data = gen_data_gaussmix(dim)
      else:
        dim_zero = dim - INT_DIM
        query = np.pad(gen_data_gaussmix(INT_DIM,n = 1)[0],(0,dim_zero))
        data = np.pad(gen_data_gaussmix(INT_DIM),((0,0),(0,dim_zero)))

      
      for ntrees in [5,10,25,50,75]:

        # inititiate forest
        forest = MForest(data,n_trees= ntrees)

        # append record for pruning
        nn1,nv1 = forest.get_nn(query,approach='prn')
        results_df = pd.concat([results_df, pd.DataFrame({'experiment_num': i, 'dimension_varying': dimvar, 
                                                          'dim':dim,'n_trees': ntrees, 'approach':'pruning','nodes_visited':nv1,'nn':nn1[1], 'd':nn1[0]},
                                                        columns = column_list)],ignore_index = True)
        i += 1

        # append record for defeatist
        nn1,nv1 = forest.get_nn(query)
        results_df = pd.concat([results_df, pd.DataFrame({'experiment_num': i, 'dimension_varying': dimvar, 
                                                          'dim':dim,'n_trees': ntrees, 'approach':'defeatist','nodes_visited':nv1,'nn':nn1[1], 'd':nn1[0]},
                                                        columns = column_list)],ignore_index = True)
        i += 1

        
        res_df = results_df.drop('nn',axis =1).drop_duplicates()
        
        res_df.to_excel(RESULT_DIR)
